#!Jinja2
# Runs through the GeoFabrics workflow for a single catchment.
# Notes - call "cylc config" to see avaliable platforms


{% set CATCHMENT_IDS = "'029'", "'055'" %}

[scheduling]
    [[graph]]
        R1 = """
            download_global_data 
            {% for CATCHMENT_ID in CATCHMENT_IDS %}
            setup_catchment & setup_instructions => download_catchment_data => rivers & waterways & lidar => dem => roughness
            {% endfor %}
        """
[runtime]
    [[root]]
        pre-script = """
                    # See bin/nesi-conda-install for details on what the following lines do
                    set +u
                    module load Miniconda3
                    source $(conda info --base)/etc/profile.d/conda.sh
                    conda activate /nesi/project/niwa03440/conda/envs/geofabrics
                    set -u
        """

        platform = maui-cs-slurm  # Run "cylc config" to see platforms - used mahuika-slurm previously
 
        [[[directives]]]
            --account = niwa03440
            --partition = nesi_prepost

    [[download_global_data]]
        # Run Python script
        script = python -c "import download_global_data; download_global_data.main()"

        execution time limit = PT30M # A maximum expected execution time

{% for CATCHMENT_ID in CATCHMENT_IDS %}
    [[setup_catchment]]
        # Run Python script
        script = python -c "import setup_catchment; setup_catchment.main(catchment_id={{ CATCHMENT_ID }})"

        execution time limit = PT30M # A maximum expected execution time

    [[setup_instructions]]
        # Run Python script
        script = python -c "import setup_instructions; setup_instructions.main(catchment_id={{ CATCHMENT_ID }})"

        execution time limit = PT30M # A maximum expected execution time

    [[download_catchment_data]]
        # Run Python script
        script = python -c "import download_catchment_data; download_catchment_data.main(catchment_id={{ CATCHMENT_ID }})"

        execution time limit = PT30M # A maximum expected execution time
        
    [[rivers]]
        # Run Python script
        script = python -c "import rivers; rivers.main(catchment_id={{ CATCHMENT_ID }})"
        
        execution retry delays = 3*PT1M # Incase the OSM HTTPS query fails first time
        execution time limit = PT1H # A maximum expected execution time
        
        [[[directives]]]
            --mem-per-cpu = 8G
            --ntasks = 4
            --job-name = rivers
            
    [[waterways]]
        # Run Python script
        script = python -c "import waterways; waterways.main(catchment_id={{ CATCHMENT_ID }})"
        
        execution retry delays = 3*PT1M # Incase the OSM HTTPS query fails first time
        execution time limit = PT1H # A maximum expected execution time

        [[[directives]]]
            --mem-per-cpu = 8G
            --ntasks = 4
            --job-name = drains
            
    [[lidar]]
        # Run Python script
        script = python -c "import lidar; lidar.main(catchment_id={{ CATCHMENT_ID }})"
        
        execution time limit = PT4H # A maximum expected execution time

        [[[directives]]]
            --mem-per-cpu = 8G
            --ntasks = 8
            --job-name = lidar
            
    [[dem]]
        # Run Python script
        script = python -c "import dem; dem.main(catchment_id={{ CATCHMENT_ID }})"
        
        execution time limit = PT1H # A maximum expected execution time

        [[[directives]]]
            --mem-per-cpu = 8G
            --ntasks = 1
            --job-name = dem
            
    [[roughness]]
        # Run Python script
        script = python -c "import roughness; roughness.main(catchment_id={{ CATCHMENT_ID }})"
        
        execution time limit = PT4H # A maximum expected execution time

        [[[directives]]]
            --mem-per-cpu = 8G
            --ntasks = 8
            --job-name = roughness
{% endfor %}
